// Generated by gencpp from file mymsg/neighborpos.msg
// DO NOT EDIT!


#ifndef MYMSG_MESSAGE_NEIGHBORPOS_H
#define MYMSG_MESSAGE_NEIGHBORPOS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mymsg
{
template <class ContainerAllocator>
struct neighborpos_
{
  typedef neighborpos_<ContainerAllocator> Type;

  neighborpos_()
    : xpos()
    , ypos()
    , time_stamp(0.0)
    , id(0)  {
    }
  neighborpos_(const ContainerAllocator& _alloc)
    : xpos(_alloc)
    , ypos(_alloc)
    , time_stamp(0.0)
    , id(0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _xpos_type;
  _xpos_type xpos;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ypos_type;
  _ypos_type ypos;

   typedef double _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef int32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::mymsg::neighborpos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mymsg::neighborpos_<ContainerAllocator> const> ConstPtr;

}; // struct neighborpos_

typedef ::mymsg::neighborpos_<std::allocator<void> > neighborpos;

typedef boost::shared_ptr< ::mymsg::neighborpos > neighborposPtr;
typedef boost::shared_ptr< ::mymsg::neighborpos const> neighborposConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mymsg::neighborpos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mymsg::neighborpos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mymsg::neighborpos_<ContainerAllocator1> & lhs, const ::mymsg::neighborpos_<ContainerAllocator2> & rhs)
{
  return lhs.xpos == rhs.xpos &&
    lhs.ypos == rhs.ypos &&
    lhs.time_stamp == rhs.time_stamp &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mymsg::neighborpos_<ContainerAllocator1> & lhs, const ::mymsg::neighborpos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mymsg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mymsg::neighborpos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mymsg::neighborpos_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mymsg::neighborpos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mymsg::neighborpos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mymsg::neighborpos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mymsg::neighborpos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mymsg::neighborpos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b4b6c25254ec4f08814442766cebb75";
  }

  static const char* value(const ::mymsg::neighborpos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b4b6c25254ec4f0ULL;
  static const uint64_t static_value2 = 0x8814442766cebb75ULL;
};

template<class ContainerAllocator>
struct DataType< ::mymsg::neighborpos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mymsg/neighborpos";
  }

  static const char* value(const ::mymsg::neighborpos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mymsg::neighborpos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] xpos\n"
"float64[] ypos\n"
"float64 time_stamp\n"
"int32 id\n"
;
  }

  static const char* value(const ::mymsg::neighborpos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mymsg::neighborpos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xpos);
      stream.next(m.ypos);
      stream.next(m.time_stamp);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct neighborpos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mymsg::neighborpos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mymsg::neighborpos_<ContainerAllocator>& v)
  {
    s << indent << "xpos[]" << std::endl;
    for (size_t i = 0; i < v.xpos.size(); ++i)
    {
      s << indent << "  xpos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.xpos[i]);
    }
    s << indent << "ypos[]" << std::endl;
    for (size_t i = 0; i < v.ypos.size(); ++i)
    {
      s << indent << "  ypos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ypos[i]);
    }
    s << indent << "time_stamp: ";
    Printer<double>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MYMSG_MESSAGE_NEIGHBORPOS_H
